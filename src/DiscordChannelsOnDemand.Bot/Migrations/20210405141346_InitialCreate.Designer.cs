// <auto-generated />
using System;
using DiscordChannelsOnDemand.Bot.Core.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DiscordChannelsOnDemand.Bot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20210405141346_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Lobby", b =>
                {
                    b.Property<string>("TriggerVoiceChannelId")
                        .HasColumnType("text");

                    b.Property<bool>("AutoCreateSpace")
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("RoomNames")
                        .HasColumnType("text");

                    b.Property<string>("ServerGuildId")
                        .HasColumnType("text");

                    b.HasKey("TriggerVoiceChannelId");

                    b.HasIndex("ServerGuildId");

                    b.ToTable("Lobby");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Room", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("HostUserId")
                        .HasColumnType("text");

                    b.Property<string>("LinkedSpaceTextChannelId")
                        .HasColumnType("text");

                    b.HasKey("ChannelId");

                    b.HasIndex("LinkedSpaceTextChannelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Server", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Space", b =>
                {
                    b.Property<string>("TextChannelId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("ServerId")
                        .HasColumnType("text");

                    b.HasKey("TextChannelId");

                    b.HasIndex("ServerId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Lobby", b =>
                {
                    b.HasOne("DiscordChannelsOnDemand.Bot.Models.Server", null)
                        .WithMany("Lobbies")
                        .HasForeignKey("ServerGuildId");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Room", b =>
                {
                    b.HasOne("DiscordChannelsOnDemand.Bot.Models.Space", "LinkedSpace")
                        .WithMany()
                        .HasForeignKey("LinkedSpaceTextChannelId");

                    b.Navigation("LinkedSpace");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Server", b =>
                {
                    b.OwnsOne("DiscordChannelsOnDemand.Bot.Models.ServerSpaceConfiguration", "SpaceConfiguration", b1 =>
                        {
                            b1.Property<string>("ServerGuildId")
                                .HasColumnType("text");

                            b1.Property<string>("SpaceCategoryId")
                                .HasColumnType("text");

                            b1.Property<string>("SpaceDefaultNames")
                                .HasColumnType("text");

                            b1.Property<TimeSpan>("SpaceTimeoutThreshold")
                                .HasColumnType("interval");

                            b1.HasKey("ServerGuildId");

                            b1.ToTable("Servers");

                            b1.WithOwner()
                                .HasForeignKey("ServerGuildId");
                        });

                    b.Navigation("SpaceConfiguration");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Space", b =>
                {
                    b.HasOne("DiscordChannelsOnDemand.Bot.Models.Server", "Server")
                        .WithMany("Spaces")
                        .HasForeignKey("ServerId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordChannelsOnDemand.Bot.Models.Server", b =>
                {
                    b.Navigation("Lobbies");

                    b.Navigation("Spaces");
                });
#pragma warning restore 612, 618
        }
    }
}
